!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
SteadyTimepoint	timings.h	/^typedef std::chrono::time_point<std::chrono::steady_clock> SteadyTimepoint;$/;"	t
SteadyTimepointPair	timings.h	/^typedef std::pair<SteadyTimepoint, SteadyTimepoint> SteadyTimepointPair;$/;"	t
__euler__project1_o__	project_1_o.h	10;"	d
__euler__project1_s__	project_1_s.h	10;"	d
__euler__project_1__	project_1.h	10;"	d
__euler__timings__	timings.h	10;"	d
add_multiples	project_1.cc	/^long add_multiples(const int max_multiple) {$/;"	f
add_multiples_for_n	project_1_s.cc	/^long add_multiples_for_n(const int max_multiple, const int divisor) {$/;"	f
add_multiples_s	project_1_s.cc	/^long add_multiples_s(const int max_multiple) {$/;"	f
add_timestamp	timings.cc	/^std::string add_timestamp(const SteadyTimepointPair& timepoints) {$/;"	f
add_timestamp	timings.h	/^std::string add_timestamp(const SteadyTimepointPair& timepoints);$/;"	p
endl	timings.cc	/^    ss << " in " << micro.count() << " micro-seconds." << std::endl;$/;"	m	class:std	file:
endl	timings.cc	/^    ss << " in " << milli.count() << " milli-seconds." << std::endl;$/;"	m	class:std	file:
endl	timings.cc	/^    ss << " in " << sec.count() << " seconds." << std::endl;$/;"	m	class:std	file:
euler_projects_h	projects.h	10;"	d
find_multiples	project_1.cc	/^void find_multiples(const int max_multiple, std::vector<int>* multiples) {$/;"	f
main	main.cc	/^int main(int argc, const char * argv[])$/;"	f
make_pair	project_1.cc	/^  std::cout << "project_1: " << sum << add_timestamp(std::make_pair(tic, toc));$/;"	p	file:
make_pair	project_1_s.cc	/^  std::cout << "project_1_s: " << sum << add_timestamp(std::make_pair(tic, toc));$/;"	p	file:
max_multiple	main.cc	/^  const int max_multiple = 1e6;$/;"	l
micro	timings.cc	/^  auto micro = std::chrono::duration_cast<std::chrono::microseconds>(timepoints.second - timepoints.first);$/;"	l
milli	timings.cc	/^  auto milli = std::chrono::duration_cast<std::chrono::milliseconds>(timepoints.second - timepoints.first);$/;"	l
multiples	project_1.cc	/^  std::vector<int> multiples;$/;"	l
project_1	project_1.cc	/^void project_1(const int max_multiple \/* = 1e3 *\/) {$/;"	f
project_1	project_1.h	/^void project_1(const int max_multiple = 1e3);$/;"	p
project_1_o	project_1_o.cc	/^void project_1_o(const int max_multiple \/* = 1e3 *\/) {$/;"	f
project_1_o	project_1_o.h	/^void project_1_o(const int max_multiple = 1e3);$/;"	p
project_1_s	project_1_s.cc	/^void project_1_s(const int max_multiple \/* = 1e3 *\/) {$/;"	f
project_1_s	project_1_s.h	/^void project_1_s(const int max_multiple = 1e3);$/;"	p
quo	project_1_s.cc	/^  int quo = (max_multiple - 1) \/ divisor;$/;"	l
sec	timings.cc	/^  auto sec = std::chrono::duration_cast<std::chrono::seconds>(timepoints.second - timepoints.first);$/;"	l
ss	timings.cc	/^  std::stringstream ss;$/;"	l
sum	project_1.cc	/^  long sum = add_multiples(max_multiple);$/;"	l
sum	project_1_s.cc	/^  long sum = add_multiples_s(max_multiple);$/;"	l
sum_1_quo	project_1_s.cc	/^  long sum_1_quo = (0.5 * quo) * (quo + 1);$/;"	l
sum_multiples	project_1_s.cc	/^  long sum_multiples = add_multiples_for_n(max_multiple, 3);$/;"	l
sum_multiples	project_1_s.cc	/^  long sum_multiples = sum_1_quo * divisor;$/;"	l
tic	project_1.cc	/^  auto tic = std::chrono::steady_clock::now();$/;"	l
tic	project_1_s.cc	/^  auto tic = std::chrono::steady_clock::now();$/;"	l
toc	project_1.cc	/^  auto toc = std::chrono::steady_clock::now();$/;"	l
toc	project_1_s.cc	/^  auto toc = std::chrono::steady_clock::now();$/;"	l
